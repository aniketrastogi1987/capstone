{
  "patent_number": "None",
  "application_number": "15590620",
  "date_published": "20171123",
  "date_produced": "20171108",
  "filing_date": "20170509",
  "main_ipcr_label": "G06N308",
  "abstract": "Methods and systems for pruning a convolutional neural network (CNN) include calculating a sum of weights for each filter in a layer of the CNN. The filters in the layer are sorted by respective sums of weights. A set of m filters with the smallest sums of weights is filtered to decrease a computational cost of operating the CNN. The pruned CNN is retrained to repair accuracy loss that results from pruning the filters.",
  "publication_number": "US20170337471A1-20171123",
  "summary": "<SOH> SUMMARY <EOH>A method for pruning a convolutional neural network (CNN) includes calculating a sum of weights for each filter in a layer of the CNN. The filters in the layer are sorted by respective sums of weights. A set of m filters with the smallest sums of weights is pruned to decrease a computational cost of operating the CNN. The pruned CNN is retrained to repair accuracy loss that results from pruning the filters. A method for pruning a CNN includes calculating a sum of weights for each filter in a layer of the CNN. The filters in the layer are sorted by respective sums of weights. A number of filters m is selected based on a sensitivity of the layer to pruning, measured as a degree of accuracy change. A set of m filters with the smallest sums of weights is pruned to decrease a computational cost of operating the CNN. Feature maps corresponding to the m pruned filters are pruned. Kernels in a subsequent layer that correspond to the pruned feature maps are pruned. The pruned CNN are retrained to repair accuracy loss that results from pruning the filters. A system for pruning a CNN includes a pruning module having a processor configured to calculate a sum of weights for each filter in a layer of the CNN, to sort the filters in the layer by respective sums of weights, and to prune m filters with the smallest sums of weights to decrease a computational cost of operating the CNN. A training module is configured to retrain the pruned CNN to repair accuracy loss that results from pruning the filters. These and other features and advantages will become apparent from the following detailed description of illustrative embodiments thereof, which is to be read in connection with the accompanying drawings.",
  "ipcr_labels": [
    "G06N308",
    "G06N304",
    "H03H2100",
    "G06N3063",
    "G06N306"
  ],
  "inventor_list": [
    {
      "inventor_name_last": "Kadav",
      "inventor_name_first": "Asim",
      "inventor_city": "Jersey City",
      "inventor_state": "NJ",
      "inventor_country": "US"
    },
    {
      "inventor_name_last": "Durdanovic",
      "inventor_name_first": "Igor",
      "inventor_city": "Lawrenceville",
      "inventor_state": "NJ",
      "inventor_country": "US"
    },
    {
      "inventor_name_last": "Graf",
      "inventor_name_first": "Hans Peter",
      "inventor_city": "Lincroft",
      "inventor_state": "NJ",
      "inventor_country": "US"
    },
    {
      "inventor_name_last": "Li",
      "inventor_name_first": "Hao",
      "inventor_city": "Silver Spring",
      "inventor_state": "MD",
      "inventor_country": "US"
    }
  ],
  "title": "PASSIVE PRUNING OF FILTERS IN A CONVOLUTIONAL NEURAL NETWORK",
  "decision": "PENDING",
  "_processing_info": {
    "original_size": 27890,
    "optimized_size": 3192,
    "reduction_percent": 88.56
  }
}